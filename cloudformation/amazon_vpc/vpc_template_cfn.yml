---
Description: Setup VPC
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Project:
    Description: "Name of the project"
    Type: String

  CreateSubnetA:
    Type: String
    Default: True
    AllowedValues: 
      - True
      - False          

  CreateSubnetB:
    Type: String
    Default: True
    AllowedValues: 
      - True
      - False    

  CreateSubnetC:
    Type: String
    Default: True
    AllowedValues: 
      - True
      - False  

  CreateSubnetD:
    Type: String
    Default: True
    AllowedValues: 
      - True
      - False    

Conditions: 
  AddSubnetA: !Equals [ !Ref CreateSubnetA, True ]
  AddSubnetB: !Equals [ !Ref CreateSubnetB, True ]
  AddSubnetC: !Equals [ !Ref CreateSubnetC, True ]
  AddSubnetD: !Equals [ !Ref CreateSubnetD, True ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref Project, "vpc"]]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref Project, "igw"]]

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Condition: AddSubnetA
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.31.0.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref Project, "pub-subnetA"]]

  SubnetB:
    Type: AWS::EC2::Subnet
    Condition: AddSubnetB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.31.16.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref Project, "pub-subnetB"]]

  SubnetC:
    Type: AWS::EC2::Subnet
    Condition: AddSubnetC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.31.32.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref Project, "pub-subnetC"]]

  SubnetD:
    Type: AWS::EC2::Subnet
    Condition: AddSubnetD
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.31.48.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 3
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref Project, "pub-subnetD"]]

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref Project, "pub-routetable"]]

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: AddSubnetA
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: AddSubnetB
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: AddSubnetC
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC

  SubnetDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: AddSubnetD
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetD

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH traffic in, all traffic out."
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ["-",[!Ref Project, "ssh-securitygroup"]]

Outputs:
  SecurityGroup:
    Description: SecurityGroup
    Value: !Ref SecurityGroup
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SecurityGroup ] ]

  SubnetA:
    Condition: AddSubnetA
    Description: SubnetA
    Value: !Ref SubnetA
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetA ] ]

  SubnetB:
    Condition: AddSubnetB
    Description: SubnetB
    Value: !Ref SubnetB
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetB ] ]

  SubnetC:
    Condition: AddSubnetC
    Description: SubnetC
    Value: !Ref SubnetC
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetC ] ]

  SubnetD:
    Condition: AddSubnetD
    Description: SubnetD
    Value: !Ref SubnetD
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetD ] ]

  SubnetList:
    Description: SubnetB
    Value: !Join [",",[!Ref SubnetA, !Ref SubnetB]]
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", SubnetList ] ]

  StackName:
    Description: StackName
    Value: !Ref AWS::StackName

