AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  License: Apache-2.0
Description: "Launch template to avoid creating a custom ami"

Parameters:
  Project:
    Type: String

  VpcStackName:
    Type: String

  KmsKeyArn:
    Type: String

  ImageName:
    Type: String

  ImageTag:
    Type: String

  InstanceType:
    Default: c5.2xlarge
    Type: String    

  MaxvCpusCount:
    Default: 8
    Type: String

  MinvCpusCount:
    Default: 0
    Type: String

  MemorySizeMiB:
    Default: 15380
    Type: String

  CCacheSizeGB:
    Default: 5
    Type: String

  VolumeSizeGB:
    Default: 500
    Type: String

  EnvType:
    Default: Spot
    Type: String  
    AllowedValues: 
      - OnDemand
      - Spot  

  BidPercentage:
    Default: 55
    Type: String

  AwsRoute53ZoneId:
    Default: ZTZ26VS35XMRM
    Type: String

  Hostname:
    Default: android.freeme.name.
    Type: String

  Ttl:
    Default: 300
    Type: String

  BucketName:
    Default: arn:aws:s3:::batch-android-build-oregon-ggiallo28
    Type: String


Conditions: 
  CreateSpotResources: !Equals [ !Ref EnvType, Spot ]
  CreateOndemandResources: !Equals [ !Ref EnvType, OnDemand ]

Resources:
  ComputeEnvironment:
    Type: "AWS::Batch::ComputeEnvironment"
    Condition: CreateOndemandResources
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: !Sub "${Project}-${AWS::Region}-${ImageTag}"
      ServiceRole: !Ref ServiceRole
      ComputeResources:
        Type: EC2
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${VpcStackName}:SecurityGroup"
        Subnets:
          - Fn::ImportValue: !Sub "${VpcStackName}:SubnetA"
          - Fn::ImportValue: !Sub "${VpcStackName}:SubnetB" 
          - Fn::ImportValue: !Sub "${VpcStackName}:SubnetC"
          - Fn::ImportValue: !Sub "${VpcStackName}:SubnetD"
        MinvCpus: !Ref MinvCpusCount
        MaxvCpus: !Ref MaxvCpusCount
        InstanceRole: !Ref InstanceProfile
        InstanceTypes:
          - !Ref InstanceType
        LaunchTemplate:
          LaunchTemplateId: !Ref ComputeLaunchTemplate
          Version: !GetAtt ComputeLaunchTemplate.LatestVersionNumber
        DesiredvCpus: !Ref MinvCpusCount
      State: ENABLED

  ComputeEnvironmentSpot:
    Type: "AWS::Batch::ComputeEnvironment"
    Condition: CreateSpotResources
    Properties:
      Type: MANAGED
      ComputeEnvironmentName: !Sub "${Project}-${AWS::Region}-${ImageTag}"
      ServiceRole: !Ref ServiceRole
      ComputeResources:
        BidPercentage: !Ref BidPercentage
        SpotIamFleetRole: !Ref ServiceRole
        Type: SPOT
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${VpcStackName}:SecurityGroup"
        Subnets:
          - Fn::ImportValue: !Sub "${VpcStackName}:SubnetA"
          - Fn::ImportValue: !Sub "${VpcStackName}:SubnetB" 
          - Fn::ImportValue: !Sub "${VpcStackName}:SubnetC"
          - Fn::ImportValue: !Sub "${VpcStackName}:SubnetD" 
        MinvCpus: !Ref MinvCpusCount
        MaxvCpus: !Ref MaxvCpusCount
        InstanceRole: !Ref InstanceProfile
        InstanceTypes:
          - !Ref InstanceType
        LaunchTemplate:
          LaunchTemplateId: !Ref ComputeLaunchTemplate
          Version: !GetAtt ComputeLaunchTemplate.LatestVersionNumber
        DesiredvCpus: !Ref MinvCpusCount
      State: ENABLED

  ComputeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join ["-",[!Ref Project, "launch-template", !Ref ImageTag]]
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName:  '/dev/sdb'  # Amazon ECS-Optimized Amazon Linux 2 ami accepts EDS vol /dev/sd[b-l]
            Ebs:
              DeleteOnTermination: true
              Encrypted: false
              VolumeSize: !Ref VolumeSizeGB
              VolumeType: "gp2"
        UserData:
         "Fn::Base64": !Sub |
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

            --==MYBOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"

            #!/bin/bash

            mkfs -t xfs -f /dev/sdb
            mkdir /data
            mount /dev/sdb /data

            blockdev --setra 4294967295 /dev/sdb
            echo 100 > /proc/sys/vm/dirty_ratio
            echo "2000" > /proc/sys/vm/vfs_cache_pressure

            service docker restart

            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            status amazon-ssm-agent
            start amazon-ssm-agent
            status amazon-ssm-agent

            curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
            python get-pip.py
            pip install awscli

            mkdir /ccache
            mount -t tmpfs -o rw,size=${CCacheSizeGB}G tmpfs /ccache

            bash <(curl -Ss https://my-netdata.io/kickstart.sh) all --non-interactive

            AWS_ROUTE53_ZONEID="${AwsRoute53ZoneId}"
            HOSTNAME="${Hostname}"
            TTL="${Ttl}"
            IP=`curl http://ifconfig.co/ 2>/dev/null`

            aws route53 change-resource-record-sets --hosted-zone-id $AWS_ROUTE53_ZONEID --change-batch "{ \"Changes\": [ { \"Action\": \"UPSERT\", \"ResourceRecordSet\": { \"Name\": \"$HOSTNAME\", \"Type\": \"A\", \"TTL\": $TTL, \"ResourceRecords\": [ { \"Value\": \"$IP\" } ] } } ] }"
            echo "Updated the DNS Zone to $IP"

            --==MYBOUNDARY==

  JobDefinition:
    Type: "AWS::Batch::JobDefinition"
    Properties:
      Type: container
      Timeout:
        AttemptDurationSeconds: 1800
      JobDefinitionName: !Join ["-",[!Ref Project, "job-definition"]]
      RetryStrategy: 
        Attempts: 3
      ContainerProperties:
        Command :
          - "./../entrypoint.sh"
        Memory: !Ref MemorySizeMiB
        Privileged: false
        ReadonlyRootFilesystem: false
        Vcpus: !Ref MaxvCpusCount
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}:${ImageTag}"
        MountPoints:
          - ContainerPath: "/workspace"
            ReadOnly: false
            SourceVolume: data
          - ContainerPath: "/ccache"
            ReadOnly: false
            SourceVolume: ccache
        Volumes:
          - Name: data
            Host:
              SourcePath: "/data"
          - Name: ccache
            Host:
              SourcePath: "/ccache"

  JobQueue:
    Type: AWS::Batch::JobQueue
    Condition: CreateOndemandResources
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref  ComputeEnvironment
      State: ENABLED
      Priority: 1
      JobQueueName: !Join ["-",[!Ref Project, "job-queue"]]

  JobQueueSpot:
    Type: AWS::Batch::JobQueue
    Condition: CreateSpotResources
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref  ComputeEnvironmentSpot
      State: ENABLED
      Priority: 1
      JobQueueName: !Join ["-",[!Ref Project, "job-queue"]]

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Join ["-",[!Ref Project, "service-role"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "batch.amazonaws.com"
                - "spotfleet.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ecs-instance-options-3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:UpdateContainerInstancesState"
                  - "ecs:Submit*"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "s3:Get*"
                  - "s3:List*"
                Resource: "*"
        - PolicyName: "security"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                  - "kms:ReEncrypt"
                  - "kms:Describe"
                Resource: !Ref KmsKeyArn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Join ["-",[!Ref Project, "instance-role"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
        - PolicyName: "security"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                  - "kms:ReEncrypt"
                  - "kms:Describe"
                Resource: !Ref KmsKeyArn
        - PolicyName: ecs-instance-options
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:UpdateContainerInstancesState"
                  - "ecs:Submit*"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: "s3-glue-data"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  #- "s3:*"
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource:
                  - !Ref BucketName

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
